import { Injectable, Logger } from "@nestjs/common";
import { UserService } from "./services/user.service";
import { ExchangeRequestService } from "./services/exchange-request.service";
import { AdminNotificationService } from "./services/admin-notification.service";
import { UserState } from "../../common/enums/user-state.enum";
import { InlineKeyboardMarkup, InlineKeyboardButton } from "telegraf/types";
import { ConfigService } from "@nestjs/config";
import { Telegraf } from "telegraf";
import { InjectBot } from "nestjs-telegraf";
import { formatUSDT, formatCurrency } from "../../common/utils/format-number.util";

@Injectable()
export class BotService {
  private logger = new Logger(BotService.name);
  private groupId: number;
  constructor(
    private userService: UserService,
    private exchangeRequestService: ExchangeRequestService,
    private adminNotificationService: AdminNotificationService,
    private configService: ConfigService,
    @InjectBot() private bot: Telegraf
  ) {
    this.groupId = Number(this.configService.get('GROUP_ID')) || -1002803395106;
  }

  async getStartMessage(): Promise<{
    text: string;
    keyboard?: InlineKeyboardMarkup;
  }> {
    const text = `üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫ USDT!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USDT.

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:`;

    return { text };
  }

  async sendDefaultMenu(telegramId: number, isAdmin: boolean): Promise<void> {
    await this.adminNotificationService.sendDefaultMenu(telegramId, isAdmin);
  }

  async sendInputKeyboard(telegramId: number, message: string): Promise<void> {
    await this.adminNotificationService.sendInputKeyboard(telegramId, message);
  }

  async sendNoInputKeyboard(telegramId: number, message: string): Promise<void> {
    await this.adminNotificationService.sendNoInputKeyboard(telegramId, message);
  }

  async getHelpMessage(): Promise<string> {
    return `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
‚Ä¢ –ù–∞–π—Ç–∏ –æ–±–º–µ–Ω–Ω–∏–∫ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ

üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥
3. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí¨ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start`;
  }

  async processUserMessage(
    message: string,
    telegramUser: any,
    userId: number
  ): Promise<string> {
    const userState = await this.userService.getUserState(userId);

    switch (userState) {
      case UserState.ENTERING_AMOUNT:
        return this.handleAmountInput(message, userId);

      case UserState.ENTERING_CITY:
        return this.handleCityInput(message, userId, telegramUser);

      default:
        return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.";
    }
  }

  private async handleAmountInput(amount: string, userId: number): Promise<string> {
    const numAmount = parseFloat(amount.replace(',', '.'));

    if (isNaN(numAmount) || numAmount <= 0) {
      return `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä: ${formatUSDT(100)} –∏–ª–∏ ${formatUSDT(100.50)})`;
    }

    await this.userService.setUserTempData(userId, 'amount', numAmount);
    await this.userService.updateUserState(userId, UserState.ENTERING_CITY);

    return 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:';
  }

  private async handleCityInput(city: string, userId: number, telegramUser: any): Promise<string> {
    const amount = await this.userService.getUserTempData(userId, 'amount');

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.exchangeRequestService.createRequest({
      userId,
      amount,
      city: city.trim(),
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const user = await this.userService.findOrCreateUser(telegramUser);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
    await this.adminNotificationService.sendRequestToAdmin(request, user);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.userService.updateUserState(userId, UserState.WAITING_ADMIN_RESPONSE);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    return `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ <b>#${request.id}</b> –ø—Ä–∏–Ω—è—Ç–∞!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
üí± –ø–æ–∫—É–ø–∫–∞: <b>${formatUSDT(amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${city}</b>

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫—É—Ä—Å–æ–º –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π.`;
  }

  async getRequestById(requestId: number) {
    return await this.exchangeRequestService.findById(requestId);
  }

  async processAdminResponse(
    requestId: number,
    rate: number,
    fullMessage: string,
    adminName: string
  ): Promise<void> {
    this.logger.log(
      `–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${requestId}: rate=${rate}, message="${fullMessage}"`
    );

    const request = await this.exchangeRequestService.findById(requestId);

    if (!request) {
      this.logger.error(`–ó–∞—è–≤–∫–∞ #${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new Error("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    this.logger.log(
      `–ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${requestId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${request.user.telegramId}`
    );

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.exchangeRequestService.setAdminResponse(
        requestId,
        rate,
        fullMessage,
        0 // totalAmount –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∫–∞
      );

      this.logger.log(
        `–ó–∞—è–≤–∫–∞ #${requestId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...`
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
      await this.adminNotificationService.sendRateToUser(
        request.user.telegramId,
        requestId,
        fullMessage,
        "USDT",
        request.amount
      );

      this.logger.log(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${request.user.telegramId}`);
    } catch (error) {
      this.logger.error("–û—à–∏–±–∫–∞ –≤ processAdminResponse:", error);
      throw error;
    }
  }

  async getActiveRequests() {
    return await this.exchangeRequestService.getActiveRequests();
  }

  async getConfirmedRequests() {
    return await this.exchangeRequestService.getConfirmedRequests();
  }

  async getRecentRequests(limit: number = 20) {
    return await this.exchangeRequestService.getRecentRequests(limit);
  }

  async notifyAdminAboutBooking(
    requestId: number,
    action: string
  ): Promise<void> {
    const request = await this.exchangeRequestService.findById(requestId);

    if (!request) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.adminNotificationService.sendUserActionToAdmin(
      requestId,
      action,
      {
        username: request.user.username,
        firstName: request.user.firstName,
        telegramId: request.user.telegramId,
      }
    );
  }

  async completeExchange(requestId: number): Promise<void> {
    await this.exchangeRequestService.setCompletedStatus(requestId);
  }

  async sendMessageToGroupHtml(message: string): Promise<void> {
    try {
    await this.bot.telegram.sendMessage(this.groupId, message, {
        parse_mode: 'HTML'
      });
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: ${error}`);
    }
  }


  async getBookingMessage(requestId: number): Promise<string> {
    const request = await this.exchangeRequestService.findById(requestId);
    
    if (!request) {
      throw new Error(`–ó–∞—è–≤–∫–∞ #${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    const clientName = request.user.username ? `@${request.user.username}` : request.user.firstName;
    
    // –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    const statusText = this.getStatusText(request.status);
    const totalRub = request.exchangeRate * request.amount;
    let message = `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ <b>#${request.id}</b>

üë§ –ö–ª–∏–µ–Ω—Ç: <b>${clientName}</b>
üìû Telegram ID: <b>${request.user.telegramId}</b>
üí± –û–ø–µ—Ä–∞—Ü–∏—è: <b>–ø–æ–∫—É–ø–∫–∞ ${formatUSDT(request.amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${request.city}</b>
üìä –°—Ç–∞—Ç—É—Å: <b>${statusText}</b>

üí∞ –ö—É—Ä—Å: <b>${formatCurrency(request.exchangeRate, '‚ÇΩ', 2)} –∑–∞ 1 USDT</b>
üí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>${formatCurrency(totalRub, '‚ÇΩ', 2)}</b>`;
    return message;
  }

  private getStatusText(status: string): string {
    const statusMap = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
      'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 
      'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
      'booked': 'üìã –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞',
      'waiting_client': '‚è≥ –ñ–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
      'expired': '‚è∞ –ò—Å—Ç–µ–∫–ª–∞',
      'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
    };
    return statusMap[status] || status;
  }
}
