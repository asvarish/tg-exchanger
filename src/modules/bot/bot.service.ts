import { Injectable } from '@nestjs/common';
import { UserService } from './services/user.service';
import { ExchangeRequestService } from './services/exchange-request.service';
import { AdminNotificationService } from './services/admin-notification.service';
import { UserState } from '../../common/enums/user-state.enum';
import { OperationType, CurrencyType } from '../../common/entities/exchange-request.entity';
import { InlineKeyboardMarkup, InlineKeyboardButton } from 'telegraf/types';

@Injectable()
export class BotService {
  constructor(
    private userService: UserService,
    private exchangeRequestService: ExchangeRequestService,
    private adminNotificationService: AdminNotificationService,
  ) {}

  async getStartMessage(): Promise<{ text: string; keyboard?: InlineKeyboardMarkup }> {
    const text = `üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É.

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`;

    const keyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: 'üíµ –ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É', callback_data: 'operation_buy' },
          { text: 'üí∏ –ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É', callback_data: 'operation_sell' },
        ],
      ],
    };

    return { text, keyboard };
  }

  async getHelpMessage(): Promise<string> {
    return `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ö—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
‚Ä¢ –ù–∞–π—Ç–∏ –æ–±–º–µ–Ω–Ω–∏–∫ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ

üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å)
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏ —Å—É–º–º—É
3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥
4. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí¨ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start`;
  }

  getCurrencyKeyboard(): InlineKeyboardMarkup {
    return {
      inline_keyboard: [
        [
          { text: 'üíµ USD', callback_data: 'currency_USD' },
          { text: 'üí∂ EUR', callback_data: 'currency_EUR' },
        ],
        [
          { text: '‚ÇΩ RUB', callback_data: 'currency_RUB' },
          { text: '‚ÇÆ USDT', callback_data: 'currency_USDT' },
        ],
      ],
    };
  }

  async processUserMessage(message: string, telegramUser: any, userId: number): Promise<string> {
    const userState = await this.userService.getUserState(userId);

    switch (userState) {
      case UserState.ENTERING_AMOUNT:
        return this.handleAmountInput(message, userId);
      
      case UserState.ENTERING_CITY:
        return this.handleCityInput(message, userId, telegramUser);
      
      default:
        return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.';
    }
  }

  private async handleAmountInput(amount: string, userId: number): Promise<string> {
    const numAmount = parseFloat(amount.replace(',', '.'));
    
    if (isNaN(numAmount) || numAmount <= 0) {
      return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)';
    }

    await this.userService.setUserTempData(userId, 'amount', numAmount);
    await this.userService.updateUserState(userId, UserState.ENTERING_CITY);

    return 'üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:';
  }

  private async handleCityInput(city: string, userId: number, telegramUser: any): Promise<string> {
    const operationType = await this.userService.getUserTempData(userId, 'operationType');
    const currency = await this.userService.getUserTempData(userId, 'currency');
    const amount = await this.userService.getUserTempData(userId, 'amount');

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.exchangeRequestService.createRequest({
      userId,
      operationType,
      currency,
      amount,
      city: city.trim(),
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const user = await this.userService.findOrCreateUser(telegramUser);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
    await this.adminNotificationService.sendRequestToAdmin(request, user);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.userService.updateUserState(userId, UserState.WAITING_ADMIN_RESPONSE);

    const operationText = operationType === OperationType.BUY ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
    
    return `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${request.id} –ø—Ä–∏–Ω—è—Ç–∞!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:
üí± ${operationText}: ${amount} ${currency}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${city}

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫—É—Ä—Å–æ–º –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π.`;
  }

  formatOperationType(operation: OperationType): string {
    return operation === OperationType.BUY ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
  }

  formatCurrency(currency: CurrencyType): string {
    const currencyMap = {
      [CurrencyType.USD]: 'üíµ USD',
      [CurrencyType.EUR]: 'üí∂ EUR',
      [CurrencyType.RUB]: '‚ÇΩ RUB',
      [CurrencyType.USDT]: '‚ÇÆ USDT',
    };
    return currencyMap[currency] || currency;
  }

  async getRequestById(requestId: number) {
    return await this.exchangeRequestService.findById(requestId);
  }

  async processAdminResponse(requestId: number, rate: number, fullMessage: string, adminName: string): Promise<void> {
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #${requestId}: rate=${rate}, message="${fullMessage}"`);
    
    const request = await this.exchangeRequestService.findById(requestId);
    
    if (!request) {
      console.error(`–ó–∞—è–≤–∫–∞ #${requestId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    console.log(`–ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #${requestId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${request.user.telegramId}`);

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.exchangeRequestService.setAdminResponse(
        requestId,
        rate,
        fullMessage,
        0 // totalAmount –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∫–∞
      );

      console.log(`–ó–∞—è–≤–∫–∞ #${requestId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
      await this.adminNotificationService.sendRateToUser(
        request.user.telegramId,
        requestId,
        fullMessage,
        request.currency,
        request.amount,
        request.operationType
      );

      console.log(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${request.user.telegramId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ processAdminResponse:', error);
      throw error;
    }
  }

  async getActiveRequests() {
    return await this.exchangeRequestService.getActiveRequests();
  }

  async notifyAdminAboutBooking(requestId: number, action: string): Promise<void> {
    const request = await this.exchangeRequestService.findById(requestId);
    
    if (!request) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.adminNotificationService.sendUserActionToAdmin(requestId, action, {
      username: request.user.username,
      firstName: request.user.firstName,
      telegramId: request.user.telegramId
    });
  }
}
