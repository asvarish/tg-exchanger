import { Injectable } from '@nestjs/common';
import { Update, Ctx, Start, Command, On, Message, Action } from 'nestjs-telegraf';
import { BotService } from './bot.service';
import { UserService } from './services/user.service';
import { ExchangeRequestService } from './services/exchange-request.service';
import { UserState } from '../../common/enums/user-state.enum';
import { OperationType, CurrencyType, RequestStatus } from '../../common/entities/exchange-request.entity';

@Injectable()
@Update()
export class BotUpdate {
  constructor(
    private readonly botService: BotService,
    private readonly userService: UserService,
    private readonly exchangeRequestService: ExchangeRequestService,
  ) {}

    @Start()
  async startCommand(@Ctx() ctx: any) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
    const startPayload = ctx.message.text.split(' ')[1];

    if (startPayload && startPayload.startsWith('respond_')) {
      const requestId = parseInt(startPayload.replace('respond_', ''));

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
      const user = await this.userService.findOrCreateUser(ctx.from);
      await this.userService.setUserTempData(user.id, 'admin_responding_to', requestId);

      await ctx.reply(`üìù –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #${requestId}

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ (—Ü–∏—Ñ—Ä–æ–π) –∏ –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ù–∞–ø—Ä–∏–º–µ—Ä: \`95.5\` –∏–ª–∏ \`95.5 - –≤—Å—Ç—Ä–µ—á–∞ —É –º–µ—Ç—Ä–æ\``, {
        parse_mode: 'Markdown',
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if (startPayload === 'admin_panel') {
      const user = await this.userService.findOrCreateUser(ctx.from);
      
      if (!user.isAdmin) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data: 'admin_active_requests' },
          ],
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
          ],
        ],
      };

      await ctx.reply('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', { reply_markup: keyboard });
      return;
    }

    // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    const user = await this.userService.findOrCreateUser(ctx.from);
    await this.userService.updateUserState(user.id, UserState.START);

    const { text, keyboard } = await this.botService.getStartMessage();
    await ctx.reply(text, {
      reply_markup: keyboard,
    });
  }

  @Command('help')
  async helpCommand(@Ctx() ctx: any) {
    const message = await this.botService.getHelpMessage();
    await ctx.reply(message);
  }

  @Action(/operation_(.+)/)
  async onOperationSelect(@Ctx() ctx: any) {
    const operation = ctx.match[1] as OperationType;
    const user = await this.userService.findOrCreateUser(ctx.from);

    await this.userService.setUserTempData(user.id, 'operationType', operation);
    await this.userService.updateUserState(user.id, UserState.CHOOSING_CURRENCY);

    const operationText = operation === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
    await ctx.editMessageText(
      `üí± –í—ã –≤—ã–±—Ä–∞–ª–∏ ${operationText} –≤–∞–ª—é—Ç—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`,
      {
        reply_markup: this.botService.getCurrencyKeyboard(),
      }
    );
  }

  @Action(/currency_(.+)/)
  async onCurrencySelect(@Ctx() ctx: any) {
    const currency = ctx.match[1] as CurrencyType;
    const user = await this.userService.findOrCreateUser(ctx.from);

    await this.userService.setUserTempData(user.id, 'currency', currency);
    await this.userService.updateUserState(user.id, UserState.ENTERING_AMOUNT);

    const operationType = await this.userService.getUserTempData(user.id, 'operationType');
    const operationText = operationType === 'buy' ? '–ø–æ–∫—É–ø–∞–µ—Ç–µ' : '–ø—Ä–æ–¥–∞–µ—Ç–µ';
    
    await ctx.editMessageText(
      `üí∞ –í—ã ${operationText} ${this.botService.formatCurrency(currency)}\n\nüíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:`
    );
  }

  @Command('admin')
  async adminCommand(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!user.isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', callback_data: 'admin_active_requests' },
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ', callback_data: 'admin_confirmed_requests' },
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
        ],
      ],
    };

    await ctx.reply('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', { reply_markup: keyboard });
  }

  @Action('admin_active_requests')
  async showActiveRequests(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const activeRequests = await this.botService.getActiveRequests();
    
    if (activeRequests.length === 0) {
      await ctx.editMessageText('üìù –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫');
      return;
    }

    let message = 'üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:\n\n';
    const keyboard = [];

    for (const request of activeRequests) {
      const operationType = request.operationType === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
      message += `üîπ –ó–∞—è–≤–∫–∞ #${request.id}\n`;
      message += `üë§ @${request.user.username || request.user.firstName}\n`;
      message += `üí± ${operationType} ${request.amount} ${request.currency}\n`;
      message += `üèôÔ∏è –ì–æ—Ä–æ–¥: ${request.city}\n`;
      message += `üìÖ ${new Date(request.createdAt).toLocaleString('ru-RU')}\n\n`;

      keyboard.push([
        {
          text: `üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É #${request.id}`,
          callback_data: `respond_${request.id}`,
        },
        {
          text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #${request.id}`,
          callback_data: `cancel_${request.id}`,
        },
      ]);
    }

    await ctx.editMessageText(message, {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  @Action('admin_confirmed_requests')
  async showConfirmedRequests(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const confirmedRequests = await this.botService.getConfirmedRequests();
    
    if (confirmedRequests.length === 0) {
      await ctx.editMessageText('üìù –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫');
      return;
    }

    let message = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–¥–µ–π—Å—Ç–≤—É—é—Ç 15 –º–∏–Ω):\n\n';
    const keyboard = [];

    for (const request of confirmedRequests) {
      const operationType = request.operationType === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
      const statusText = this.getStatusText(request.status);
      const timeLeft = this.getTimeLeft(request.expiresAt);
      
      message += `üîπ –ó–∞—è–≤–∫–∞ #${request.id} ${statusText}\n`;
      message += `üë§ @${request.user.username || request.user.firstName}\n`;
      message += `üí± ${operationType} ${request.amount} ${request.currency}\n`;
      message += `üí∞ –ö—É—Ä—Å: ${request.exchangeRate}\n`;
      message += `‚è∞ ${timeLeft}\n`;
      message += `üìÖ ${new Date(request.confirmedAt).toLocaleString('ru-RU')}\n\n`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
      keyboard.push([
        {
          text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #${request.id}`,
          callback_data: `cancel_${request.id}`,
        },
      ]);
    }

    await ctx.editMessageText(message, {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  private getStatusText(status: string): string {
    const statusMap = {
      'confirmed': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
      'booked': '‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞',
      'waiting_client': 'üí¨ –ñ–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
    };
    return statusMap[status] || status;
  }

  private getTimeLeft(expiresAt: Date): string {
    const now = new Date();
    const diffMs = new Date(expiresAt).getTime() - now.getTime();
    
    if (diffMs <= 0) {
      return '‚ùå –ò—Å—Ç–µ–∫–ª–∞';
    }
    
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffSeconds = Math.floor((diffMs % (1000 * 60)) / 1000);
    
    return `–û—Å—Ç–∞–ª–æ—Å—å: ${diffMinutes}–º ${diffSeconds}—Å`;
  }

  @Action(/respond_(\d+)/)
  async onRespondToRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
    await this.userService.setUserTempData(user.id, 'admin_responding_to', requestId);
    
    await ctx.editMessageText(`üìù –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #${requestId}

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ (—Ü–∏—Ñ—Ä–æ–π) –∏ –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ù–∞–ø—Ä–∏–º–µ—Ä: \`95.5\` –∏–ª–∏ \`95.5 - –≤—Å—Ç—Ä–µ—á–∞ —É –º–µ—Ç—Ä–æ\``, {
      parse_mode: 'Markdown',
    });

    await ctx.answerCbQuery('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
  }

  @Action(/reject_(\d+)/)
  async onRejectRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.botService.getRequestById(requestId);
    if (!request) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    try {
      await ctx.telegram.sendMessage(
        request.user.telegramId,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', error);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê',
      {
        reply_markup: undefined,
      }
    );

    await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
  }

  @Action(/cancel_(\d+)/)
  async onCancelRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.botService.getRequestById(requestId);
    if (!request) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.exchangeRequestService.updateRequestStatus(requestId, RequestStatus.CANCELLED);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª –æ–± –æ—Ç–º–µ–Ω–µ
    await this.botService.notifyAdminAboutBooking(requestId, 'cancelled');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ
    try {
      const operationType = request.operationType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
      await ctx.telegram.sendMessage(
        request.user.telegramId,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

üìã –ó–∞—è–≤–∫–∞: ${operationType} ${request.amount} ${request.currency}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${request.city}

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ:', error);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
    try {
      await ctx.editMessageText(
        `‚ùå –ó–∞—è–≤–∫–∞ #${requestId} –û–¢–ú–ï–ù–ï–ù–ê

üë§ –ö–ª–∏–µ–Ω—Ç: @${request.user.username || request.user.firstName}
üìû Telegram ID: ${request.user.telegramId}
üí± –û–ø–µ—Ä–∞—Ü–∏—è: ${request.operationType === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}
üí∞ –í–∞–ª—é—Ç–∞: ${request.currency}
üíµ –°—É–º–º–∞: ${request.amount}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${request.city}
üìÖ –û—Ç–º–µ–Ω–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}`,
        { reply_markup: undefined }
      );
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }

    await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
  }

  @On('text')
  async onText(@Ctx() ctx: any, @Message('text') message: string) {
    // –õ–æ–≥–∏—Ä—É–µ–º ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    console.log('Chat ID:', ctx.chat.id, 'Type:', ctx.chat.type);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ –∑–∞—è–≤–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID)
    const adminRespondingTo = await this.userService.getUserTempData(user.id, 'admin_responding_to');
    
    if (adminRespondingTo) {
      await this.handleAdminResponse(ctx, message, adminRespondingTo);
      return;
    }
    
    const response = await this.botService.processUserMessage(message, ctx.from, user.id);
    await ctx.reply(response);
  }

  private async handleAdminResponse(@Ctx() ctx: any, message: string, requestId: number) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ)
    const rateMatch = message.match(/^(\d+(?:\.\d+)?)/);
    if (!rateMatch) {
      await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ–º).\n–ù–∞–ø—Ä–∏–º–µ—Ä: 95.5 –∏–ª–∏ 95.5 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
      return;
    }

    const rate = parseFloat(rateMatch[1]);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await this.botService.processAdminResponse(requestId, rate, message, ctx.from.first_name);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    const user = await this.userService.findOrCreateUser(ctx.from);
    await this.userService.setUserTempData(user.id, 'admin_responding_to', null);

    await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞—è–≤–∫–µ #${requestId}`);
  }

    @Action(/book_(\d+)/)
  async onBookRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ BOOKED
    await this.exchangeRequestService.setBookedStatus(requestId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!',
      { reply_markup: undefined }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    await this.botService.notifyAdminAboutBooking(requestId, 'book');

    await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!');
  }

  @Action(/clarify_(\d+)/)
  async onClarifyRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\nüí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!',
      { reply_markup: undefined }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await this.botService.notifyAdminAboutBooking(requestId, 'clarify');
    
    await ctx.answerCbQuery('üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!');
  }

    @Action(/wait_info_(\d+)/)
  async onWaitInfoRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ WAITING_CLIENT
    await this.exchangeRequestService.setWaitingClientStatus(requestId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚è≥ –û–∂–∏–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
      { reply_markup: undefined }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await this.botService.notifyAdminAboutBooking(requestId, 'wait_info');

    await ctx.answerCbQuery('‚è≥ –û–∂–∏–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
  }

  @On('sticker')
  async onSticker(@Ctx() ctx: any) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä');
  }
}
