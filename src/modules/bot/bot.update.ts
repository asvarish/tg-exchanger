import { Injectable, Logger } from '@nestjs/common';
import { Update, Ctx, Start, Command, On, Message, Action } from 'nestjs-telegraf';
import { BotService } from './bot.service';
import { UserService } from './services/user.service';
import { ExchangeRequestService } from './services/exchange-request.service';
import { UserState } from '../../common/enums/user-state.enum';
import { RequestStatus } from '../../common/entities/exchange-request.entity';
import { formatUSDT, formatCurrency, formatNumber } from '../../common/utils/format-number.util';

@Injectable()
@Update()
export class BotUpdate {
  private logger = new Logger(BotUpdate.name);
  constructor(
    private readonly botService: BotService,
    private readonly userService: UserService,
    private readonly exchangeRequestService: ExchangeRequestService,
  ) {
  }

    @Start()
  async startCommand(@Ctx() ctx: any) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
    const startPayload = ctx.message.text.split(' ')[1];

    if (startPayload && startPayload.startsWith('respond_')) {
      const requestId = parseInt(startPayload.replace('respond_', ''));

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
      const user = await this.userService.findOrCreateUser(ctx.from);
      await this.userService.setUserTempData(user.id, 'admin_responding_to', requestId);

      await ctx.reply(`üìù –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #${requestId}

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ (—Ü–∏—Ñ—Ä–æ–π) –∏ –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ù–∞–ø—Ä–∏–º–µ—Ä: \`${formatNumber(95.5)}\` –∏–ª–∏ \`${formatNumber(95.5)} - –≤—Å—Ç—Ä–µ—á–∞ —É –º–µ—Ç—Ä–æ\``, {
        parse_mode: 'HTML',
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if (startPayload === 'admin_panel') {
      const user = await this.userService.findOrCreateUser(ctx.from);
      
      if (!user.isAdmin) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data: 'admin_active_requests' },
          ],
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
          ],
        ],
      };

      await ctx.reply('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', { reply_markup: keyboard });
      return;
    }

    // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –º–µ–Ω—é
    const user = await this.userService.findOrCreateUser(ctx.from);
    await this.botService.sendDefaultMenu(ctx.from.id, user.isAdmin);
  }

  @Command('help')
  async helpCommand(@Ctx() ctx: any) {
    const message = await this.botService.getHelpMessage();
    await ctx.reply(message);
  }



  @Command('admin')
  async adminCommand(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!user.isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', callback_data: 'admin_active_requests' },
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ', callback_data: 'admin_confirmed_requests' },
        ],
        [
          { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'admin_stats' },
        ],
      ],
    };

    await ctx.reply('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', { reply_markup: keyboard });
  }

  @Action('admin_active_requests')
  async showActiveRequests(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const activeRequests = await this.botService.getActiveRequests();
    
    if (activeRequests.length === 0) {
      await ctx.editMessageText('üìù –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫');
      return;
    }

    let message = 'üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:\n\n';
    const keyboard = [];

    for (const request of activeRequests) {
      const clientName = request.user.username ? `@${request.user.username}` : request.user.firstName;
      
      message += `üîπ –ó–∞—è–≤–∫–∞ <b>#${request.id}</b>
üë§ –ö–ª–∏–µ–Ω—Ç: <b>${clientName}</b>
üí± –ü–æ–∫—É–ø–∫–∞: <b>${formatUSDT(request.amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${request.city}</b>
üìÖ <b>${new Date(request.createdAt).toLocaleString('ru-RU')}</b>

`;

      keyboard.push([
        {
          text: `üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞—è–≤–∫—É #${request.id}`,
          callback_data: `respond_${request.id}`,
        },
        {
          text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #${request.id}`,
          callback_data: `cancel_${request.id}`,
        },
      ]);
    }

    await ctx.editMessageText(message, {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  @Action('admin_confirmed_requests')
  async showConfirmedRequests(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const confirmedRequests = await this.botService.getConfirmedRequests();
    
    if (confirmedRequests.length === 0) {
      await ctx.editMessageText('üìù –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫');
      return;
    }

    let message = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n';
    const keyboard = [];

    for (const request of confirmedRequests) {
      const statusText = this.getStatusText(request.status);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
      const totalRub = request.exchangeRate * request.amount;
      const clientName = request.user.username ? `@${request.user.username}` : request.user.firstName;
      
      // –î–ª—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      let timeInfo = '';
      if (request.status !== 'booked') {
        const timeLeft = this.getTimeLeft(request.expiresAt);
        timeInfo = `‚è∞ ${timeLeft}`;
      } else {
        timeInfo = '‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ - –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è';
      }
      
      message += `üîπ –ó–∞—è–≤–∫–∞ <b>#${request.id}</b> ${statusText}
üë§ –ö–ª–∏–µ–Ω—Ç: <b>${clientName}</b>
üí± –ü–æ–∫—É–ø–∫–∞: <b>${formatUSDT(request.amount)}</b>
üí∞ –ö—É—Ä—Å: <b>${formatCurrency(request.exchangeRate, '‚ÇΩ', 2)} –∑–∞ 1 USDT</b>
üí∏ –ò—Ç–æ–≥–æ: <b>${formatCurrency(totalRub, '‚ÇΩ', 2)}</b>
${timeInfo}
üìÖ <b>${new Date(request.confirmedAt).toLocaleString('ru-RU')}</b>

`;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
      if (request.status === 'booked') {
        // –î–ª—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö - –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
        keyboard.push([
          {
            text: `‚úÖ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω #${request.id}`,
            callback_data: `complete_${request.id}`,
          },
          {
            text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #${request.id}`,
            callback_data: `cancel_${request.id}`,
          },
        ]);
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–∞
        keyboard.push([
          {
            text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #${request.id}`,
            callback_data: `cancel_${request.id}`,
          },
        ]);
      }
    }

    await ctx.editMessageText(message, {
      reply_markup: { inline_keyboard: keyboard },
      parse_mode: 'HTML',
    });
  }

  @Action('admin_stats')
  async showStats(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const recentRequests = await this.botService.getRecentRequests(20);
    
    if (recentRequests.length === 0) {
      await ctx.editMessageText('üìä –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    let message = 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –∑–∞—è–≤–æ–∫:\n\n';
    const keyboard = [];

    for (const request of recentRequests) {
      const statusText = this.getStatusText(request.status);
      const timeAgo = this.getTimeAgo(request.createdAt);
      const clientName = request.user.username ? `@${request.user.username}` : request.user.firstName;
      
      let rateInfo = '';
      if (request.exchangeRate) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
        const totalRub = request.exchangeRate * request.amount;
        rateInfo = `üí∞ –ö—É—Ä—Å: <b>${formatCurrency(request.exchangeRate, '‚ÇΩ', 2)} –∑–∞ 1 USDT</b>
üí∏ –ò—Ç–æ–≥–æ: <b>${formatCurrency(totalRub, '‚ÇΩ', 2)}</b>
`;
      }
      
      message += `üîπ –ó–∞—è–≤–∫–∞ <b>#${request.id}</b> ${statusText}
üë§ –ö–ª–∏–µ–Ω—Ç: <b>${clientName}</b>
üí± –ü–æ–∫—É–ø–∫–∞: <b>${formatUSDT(request.amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${request.city}</b>
üìÖ <b>${timeAgo}</b>
${rateInfo}
`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
      keyboard.push([
        {
          text: `üëÅÔ∏è –î–µ—Ç–∞–ª–∏ #${request.id}`,
          callback_data: `view_details_${request.id}`,
        },
      ]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard.push([
      {
        text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
        callback_data: 'admin_panel_back',
      },
    ]);

    await ctx.editMessageText(message, {
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  @Action('admin_panel_back')
  async backToAdminPanel(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', callback_data: 'admin_active_requests' },
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ', callback_data: 'admin_confirmed_requests' },
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
        ],
      ],
    };

    await ctx.editMessageText('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', { reply_markup: keyboard });
  }

  @Action(/view_details_(\d+)/)
  async viewRequestDetails(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    const request = await this.botService.getRequestById(requestId);
    if (!request) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const statusText = this.getStatusText(request.status);
    const timeAgo = this.getTimeAgo(request.createdAt);
    const clientName = request.user.username ? `@${request.user.username}` : request.user.firstName;
    
    let message = `üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ <b>#${request.id}</b>

üë§ –ö–ª–∏–µ–Ω—Ç: <b>${clientName}</b>
üìû Telegram ID: <b>${request.user.telegramId}</b>
üí± –û–ø–µ—Ä–∞—Ü–∏—è: <b>–ü–æ–∫—É–ø–∫–∞ ${formatUSDT(request.amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${request.city}</b>
üìÖ –°–æ–∑–¥–∞–Ω–∞: <b>${timeAgo}</b>
üìä –°—Ç–∞—Ç—É—Å: <b>${statusText}</b>
`;
    
    if (request.exchangeRate) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
      const totalRub = request.exchangeRate * request.amount;
      message += `üí∞ –ö—É—Ä—Å: <b>${formatCurrency(request.exchangeRate, '‚ÇΩ', 2)} –∑–∞ 1 USDT</b>
üí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>${formatCurrency(totalRub, '‚ÇΩ', 2)}</b>
üìÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: <b>${new Date(request.confirmedAt).toLocaleString('ru-RU')}</b>
`;
    }
    
    if (request.adminResponse) {
      message += `üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞: <b>${request.adminResponse}</b>
`;
    }

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ',
            callback_data: 'admin_stats',
          },
        ],
      ],
    };

    await ctx.editMessageText(message, { reply_markup: keyboard });
  }

  private getStatusText(status: string): string {
    const statusMap = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
      'confirmed': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
      'booked': '‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞',
      'waiting_client': 'üí¨ –ñ–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
      'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
      'expired': '‚è∞ –ò—Å—Ç–µ–∫–ª–∞',
    };
    return statusMap[status] || status;
  }

  private getTimeLeft(expiresAt: Date): string {
    const now = new Date();
    const diffMs = new Date(expiresAt).getTime() - now.getTime();
    
    if (diffMs <= 0) {
      return '‚ùå –ò—Å—Ç–µ–∫–ª–∞';
    }
    
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffSeconds = Math.floor((diffMs % (1000 * 60)) / 1000);
    
    return `–û—Å—Ç–∞–ª–æ—Å—å: ${diffMinutes}–º ${diffSeconds}—Å`;
  }

  private getTimeAgo(date: Date): string {
    const now = new Date();
    const diffMs = now.getTime() - new Date(date).getTime();
    
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays > 0) {
      return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else if (diffHours > 0) {
      return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
    } else if (diffMinutes > 0) {
      return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    }
  }

  @Action(/respond_(\d+)/)
  async onRespondToRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
    await this.userService.setUserTempData(user.id, 'admin_responding_to', requestId);
    
    await ctx.editMessageText(`üìù –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #${requestId}

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ (—Ü–∏—Ñ—Ä–æ–π) –∏ –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ù–∞–ø—Ä–∏–º–µ—Ä: \`${formatNumber(95.5)}\` –∏–ª–∏ \`${formatNumber(95.5)} - –≤—Å—Ç—Ä–µ—á–∞ —É –º–µ—Ç—Ä–æ\``, {
      parse_mode: 'Markdown',
    });

    await ctx.answerCbQuery('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
  }

  @Action(/reject_(\d+)/)
  async onRejectRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.botService.getRequestById(requestId);
    if (!request) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    try {
      await ctx.telegram.sendMessage(
        request.user.telegramId,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', error);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê',
      {
        reply_markup: undefined,
      }
    );

    await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
  }

  @Action(/complete_(\d+)/)
  async onCompleteRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.botService.getRequestById(requestId);
    if (!request) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–º–µ–Ω
    await this.botService.completeExchange(requestId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await this.botService.notifyAdminAboutBooking(requestId, 'completed');

    await ctx.answerCbQuery(`‚úÖ –û–±–º–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ #${requestId} –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    await this.showConfirmedRequests(ctx);
  }

  @Action(/cancel_(\d+)/)
  async onCancelRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    if (!user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    const request = await this.botService.getRequestById(requestId);
    if (!request) {
      await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.exchangeRequestService.updateRequestStatus(requestId, RequestStatus.CANCELLED);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª –æ–± –æ—Ç–º–µ–Ω–µ
    await this.botService.notifyAdminAboutBooking(requestId, 'cancelled');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ
    try {
      await ctx.telegram.sendMessage(
        request.user.telegramId,
        `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

üìã –ó–∞—è–≤–∫–∞: –ü–æ–∫—É–ø–∫–∞ ${formatUSDT(request.amount)}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${request.city}

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start`
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ:', error);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
    try {
      await ctx.editMessageText(
        `‚ùå –ó–∞—è–≤–∫–∞ #${requestId} –û–¢–ú–ï–ù–ï–ù–ê

üë§ –ö–ª–∏–µ–Ω—Ç: @${request.user.username || request.user.firstName}
üìû Telegram ID: ${request.user.telegramId}
üí± –û–ø–µ—Ä–∞—Ü–∏—è: –ø–æ–∫—É–ø–∫–∞ USDT
üí∞ –í–∞–ª—é—Ç–∞: ‚ÇÆ USDT
üíµ –°—É–º–º–∞: ${formatUSDT(request.amount)}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${request.city}
üìÖ –û—Ç–º–µ–Ω–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}`,
        { reply_markup: undefined }
      );
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }

    await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
  }

  @On('text')
  async onText(@Ctx() ctx: any, @Message('text') message: string) {
    // –õ–æ–≥–∏—Ä—É–µ–º ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    this.logger.log('Chat ID:', ctx.chat.id, 'Type:', ctx.chat.type);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ –∑–∞—è–≤–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID)
    const adminRespondingTo = await this.userService.getUserTempData(user.id, 'admin_responding_to');
    
    if (adminRespondingTo) {
      await this.handleAdminResponse(ctx, message, adminRespondingTo);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "üí∞ –ö—É–ø–∏—Ç—å USDT"
    if (message === 'üí∞ –ö—É–ø–∏—Ç—å USDT') {
      await this.userService.updateUserState(user.id, UserState.ENTERING_AMOUNT);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞
      await this.botService.sendInputKeyboard(ctx.from.id, 'üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:');
      return;
    }
    
    const response = await this.botService.processUserMessage(message, ctx.from, user.id);
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if (response.includes('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #') && response.includes('–ø—Ä–∏–Ω—è—Ç–∞!')) {
      const keyboard = {
        keyboard: [
          [{ text: 'üí∞ –ö—É–ø–∏—Ç—å USDT' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(response, { reply_markup: keyboard, parse_mode: 'HTML' });
    } else {
      const options = response.includes('–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥') ? {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ú–æ—Å–∫–≤–∞', callback_data: 'city_–ú–æ—Å–∫–≤–∞' },
              { text: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', callback_data: 'city_–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' }
            ],
            [
              { text: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data: 'city_–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
              { text: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', callback_data: 'city_–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' }
            ],
            [
              { text: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', callback_data: 'city_–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' }
            ]
          ],
          parse_mode: 'HTML'
        }
      } : {
        parse_mode: 'HTML'
      };
      await ctx.reply(response, options);
    }
  }

  private async handleAdminResponse(@Ctx() ctx: any, message: string, requestId: number) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ)
    const rateMatch = message.match(/^(\d+(?:\.\d+)?)/);
    if (!rateMatch) {
      await ctx.reply(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ–º).\n–ù–∞–ø—Ä–∏–º–µ—Ä: ${formatNumber(95.5)} –∏–ª–∏ 75`);
      return;
    }

    const rate = parseFloat(rateMatch[1]);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    await this.botService.processAdminResponse(requestId, rate, message, ctx.from.first_name);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    const user = await this.userService.findOrCreateUser(ctx.from);
    await this.userService.setUserTempData(user.id, 'admin_responding_to', null);

    await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞—è–≤–∫–µ #${requestId}`);
  }

  @Action(/city_(.+)/)
  async handleCitySelection(@Ctx() ctx: any) {
    const cityName = ctx.match[1];
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É" —Å –∫–Ω–æ–ø–∫–∏
    await ctx.answerCbQuery();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ callback –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const user = await this.userService.findOrCreateUser(ctx.from);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ –∑–∞—è–≤–∫—É
    const adminRespondingTo = await this.userService.getUserTempData(user.id, 'admin_responding_to');
    
    if (adminRespondingTo) {
      await this.handleAdminResponse(ctx, cityName, adminRespondingTo);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ botService
    const response = await this.botService.processUserMessage(cityName, ctx.from, user.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if (response.includes('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #') && response.includes('–ø—Ä–∏–Ω—è—Ç–∞!')) {
      const keyboard = {
        keyboard: [
          [{ text: 'üí∞ –ö—É–ø–∏—Ç—å USDT' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
        parse_mode: 'HTML'
      };

      await ctx.reply(response, { reply_markup: keyboard });
    } else {
      const options = response.includes('–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥') ? {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ú–æ—Å–∫–≤–∞', callback_data: 'city_–ú–æ—Å–∫–≤–∞' },
              { text: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', callback_data: 'city_–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' }
            ],
            [
              { text: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', callback_data: 'city_–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
              { text: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', callback_data: 'city_–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' }
            ],
            [
              { text: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', callback_data: 'city_–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä' }
            ]
          ],
          parse_mode: 'HTML'
        }
      } : {
        parse_mode: 'HTML'
      };
      await ctx.reply(response, options);
    }
  }


  @Action(/book_(\d+)/)
  async onBookRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ BOOKED
    await this.exchangeRequestService.setBookedStatus(requestId);

    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    const originalMessage = ctx.callbackQuery.message.text;
    // –ò—â–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (‚ö†Ô∏è) –¥–æ –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const baseMessage = originalMessage.replace(/\s*<b>‚ö†Ô∏è.*$/s, '');
    
    const newMessage = `${baseMessage}

‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!

<b>–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏!</b>`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.editMessageText(
      newMessage,
      { reply_markup: undefined }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    await this.botService.notifyAdminAboutBooking(requestId, 'book');
    await this.botService.sendMessageToGroupHtml(await this.botService.getBookingMessage(requestId));

    await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!');
  }

  @Action(/clarify_(\d+)/)
  async onClarifyRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?" –¥–æ –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const originalMessage = ctx.callbackQuery.message.text;
    const newMessage = originalMessage.replace(/\s*–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å\?.*$/s, '') + '\n\nüí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.editMessageText(
      newMessage,
      { reply_markup: {
        keyboard: [
          [{ text: 'üí∞ –ö—É–ø–∏—Ç—å USDT' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      } }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await this.botService.notifyAdminAboutBooking(requestId, 'clarify');
    
    await ctx.answerCbQuery('üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!');
  }

    @Action(/wait_info_(\d+)/)
  async onWaitInfoRequest(@Ctx() ctx: any) {
    const requestId = parseInt(ctx.match[1]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ WAITING_CLIENT
    await this.exchangeRequestService.setWaitingClientStatus(requestId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ë—Ä–æ–Ω–∏—Ä—É—é"
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –ë—Ä–æ–Ω–∏—Ä—É—é',
            callback_data: `book_${requestId}`,
          },
        ],
      ],
    };

    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?" –¥–æ –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const originalMessage = ctx.callbackQuery.message.text;
    const baseMessage = originalMessage.replace(/\s*–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å\?.*$/s, '');
    
    await ctx.editMessageText(
      baseMessage + `\n\n‚è≥ –û–∂–∏–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ö—É—Ä—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ${formatNumber(10)} –º–∏–Ω—É—Ç.`,
      { reply_markup: keyboard }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await this.botService.notifyAdminAboutBooking(requestId, 'wait_info');

    await ctx.answerCbQuery('‚è≥ –û–∂–∏–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
  }

  @On('sticker')
  async onSticker(@Ctx() ctx: any) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üòä');
  }

  @Action('buy_usdt')
  async onBuyUsdt(@Ctx() ctx: any) {
    const user = await this.userService.findOrCreateUser(ctx.from);
    await this.userService.updateUserState(user.id, UserState.ENTERING_AMOUNT);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å force_reply –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await this.botService.sendInputKeyboard(ctx.from.id, 'üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:');
  }
}
