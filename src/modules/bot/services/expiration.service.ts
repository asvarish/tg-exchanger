import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { ExchangeRequestService } from './exchange-request.service';
import { AdminNotificationService } from './admin-notification.service';
import { RequestStatus } from '../../../common/entities/exchange-request.entity';
import { formatUSDT, formatCurrency, formatNumber } from '../../../common/utils/format-number.util';
import { sendMessageWithPersistentKeyboard } from '../../../common/utils/keyboard.util';

@Injectable()
export class ExpirationService {
  private logger = new Logger(ExpirationService.name);
  constructor(
    @InjectBot() private readonly bot: Telegraf,
    private readonly exchangeRequestService: ExchangeRequestService,
    private readonly adminNotificationService: AdminNotificationService,
  ) {}

  @Cron('*/30 * * * * *') // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  async checkExpiredRequests() {
    try {
      const expiredRequests = await this.exchangeRequestService.getExpiredRequests();
      
      if (expiredRequests.length === 0) {
        return;
      }

      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${expiredRequests.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞—è–≤–æ–∫`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      for (const request of expiredRequests) {
        await this.notifyUserAboutExpiration(request);
      }

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
      const requestIds = expiredRequests.map(r => r.id);
      await this.exchangeRequestService.markAsExpired(requestIds);

      this.logger.log(`–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ: –∑–∞—è–≤–∫–∏ #${requestIds.join(', #')}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞—è–≤–æ–∫:', error);
    }
  }

  @Cron('*/30 * * * * *') // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  async checkWaitingClientRequests() {
    try {
      const waitingRequests = await this.exchangeRequestService.getWaitingClientRequests();
      
      if (waitingRequests.length === 0) {
        return;
      }

      const now = new Date();
      
      for (const request of waitingRequests) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 10 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ (confirmedAt)
        if (!request.confirmedAt) {
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—è–≤–∫–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        }

        const timeSinceConfirmation = now.getTime() - new Date(request.confirmedAt).getTime();
        const tenMinutes = 10 * 60 * 1000; // ${formatNumber(10)} –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        if (timeSinceConfirmation >= tenMinutes) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
          await this.adminNotificationService.sendExpiredMessage(
            request.user.telegramId,
            request.id
          );
          
          // –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –∏—Å—Ç–µ–∫—à—É—é
          await this.exchangeRequestService.updateRequestStatus(request.id, RequestStatus.EXPIRED);
          
          this.logger.log(`–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #${request.id}`);
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ WAITING_CLIENT:', error);
    }
  }

  private async notifyUserAboutExpiration(request: any) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
    const totalRub = request.exchangeRate * request.amount;
    
    const message = `‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É—Ä—Å–∞ –ø–æ –∑–∞—è–≤–∫–µ <b>#${request.id}</b> –∏—Å—Ç–µ–∫!

üìã –ó–∞—è–≤–∫–∞: –ø–æ–∫—É–ø–∫–∞ <b>${formatUSDT(request.amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${request.city}</b>
üí± –ö—É—Ä—Å: <b>${formatCurrency(request.exchangeRate, '‚ÇΩ', 2)}</b> –∑–∞ 1 USDT
üí∏ –ò—Ç–æ–≥–æ: <b>${formatCurrency(totalRub, '‚ÇΩ', 2)}</b>
üìÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: <b>${new Date(request.expiresAt).toLocaleString('ru-RU')}</b>

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üí∞ –ö—É–ø–∏—Ç—å USDT"</b> –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ`;

    try {
      await this.bot.telegram.sendMessage(request.user.telegramId, message, {
        parse_mode: 'HTML',
        reply_markup: {
        keyboard: [
          [{ text: 'üí∞ –ö—É–ø–∏—Ç—å USDT' }]
        ],  
        resize_keyboard: true,
        one_time_keyboard: false
      });
      this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${request.user.telegramId} –ø–æ –∑–∞—è–≤–∫–µ #${request.id}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${request.user.telegramId}:`, error);
    }
  }
}
