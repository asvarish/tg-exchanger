import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { ExchangeRequest } from '../../../common/entities/exchange-request.entity';
import { User } from '../../../common/entities/user.entity';
import { InlineKeyboardMarkup } from 'telegraf/types';
import { formatUSDT, formatCurrency, formatNumber } from '../../../common/utils/format-number.util';
import { sendMessageWithKeyboards } from '../../../common/utils/keyboard.util';

@Injectable()
export class AdminNotificationService {
  private logger = new Logger(AdminNotificationService.name);
  constructor(
    @InjectBot() private bot: Telegraf,
    private configService: ConfigService,
  ) {}

  async sendDefaultMenu(telegramId: number, isAdmin: boolean): Promise<void> {
    if (isAdmin) {
      const adminKeyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [
            { text: 'üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', callback_data: 'admin_active_requests' },
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ', callback_data: 'admin_confirmed_requests' },
          ],
          [
            { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'admin_stats' },
          ],
        ],
      };

      await this.bot.telegram.sendMessage(
        telegramId,
        'üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
        { reply_markup: adminKeyboard }
      );
    } else {
      // –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ Telegram (–Ω–µ inline)
      const userKeyboard = {
        keyboard: [
          [{ text: 'üí∞ –ö—É–ø–∏—Ç—å USDT' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      // Inline-–∫–Ω–æ–ø–∫–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      const inlineKeyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [
            { text: 'üí∞ –ö—É–ø–∏—Ç—å USDT', callback_data: 'buy_usdt' }
          ]
        ]
      };

      await this.bot.telegram.sendMessage(
        telegramId,
        `üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫ USDT!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USDT.`,
        { 
          reply_markup: userKeyboard,
          parse_mode: 'HTML'
        }
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π
      await this.bot.telegram.sendMessage(
        telegramId,
        'üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:',
        { reply_markup: inlineKeyboard }
      );
    }
  }

  async sendInputKeyboard(telegramId: number, message: string): Promise<void> {
    // –ü—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–≤–æ–¥–∞ - —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const removeKeyboard = {
      remove_keyboard: true as const
    };

    await this.bot.telegram.sendMessage(
      telegramId,
      message,
      { reply_markup: removeKeyboard }
    );
  }

  async sendNoInputKeyboard(telegramId: number, message: string): Promise<void> {
    // –ö–æ–≥–¥–∞ –≤–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ö—É–ø–∏—Ç—å USDT"
    const noInputKeyboard = {
      keyboard: [
        [{ text: 'üí∞ –ö—É–ø–∏—Ç—å USDT' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await this.bot.telegram.sendMessage(
      telegramId,
      message,
      { reply_markup: noInputKeyboard }
    );
  }

  async sendRequestToAdmin(request: ExchangeRequest, user: User): Promise<void> {
    const adminChatId = this.configService.get('ADMIN_CHAT_ID');
    
    if (!adminChatId) {
      this.logger.error('ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    const userInfo = user.username ? `@${user.username}` : `${user.firstName}`;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
    const botInfo = await this.bot.telegram.getMe();
    const botUsername = botInfo.username;

    const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ <b>#${request.id}</b>

üë§ –ö–ª–∏–µ–Ω—Ç: <b>${userInfo}</b>
üìû Telegram ID: <b>${user.telegramId}</b>
üí± –û–ø–µ—Ä–∞—Ü–∏—è: <b>–ø–æ–∫—É–ø–∫–∞ USDT</b>
üí∞ –í–∞–ª—é—Ç–∞: <b>‚ÇÆ USDT</b>
üíµ –°—É–º–º–∞: <b>${formatUSDT(request.amount)}</b>
üèôÔ∏è –ì–æ—Ä–æ–¥: <b>${request.city}</b>
üìÖ –î–∞—Ç–∞: <b>${new Date().toLocaleString('ru-RU')}</b>

ü§ñ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –≤ –±–æ—Ç–µ`;

    try {
      const sentMessage = await this.bot.telegram.sendMessage(
        adminChatId,
        message,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'ü§ñ –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –±–æ—Ç–µ',
                  url: `https://t.me/${botUsername}?start=admin_panel`,
                },
              ],
            ],
          },
        }
      );

      // –°–æ—Ö—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.saveAdminMessageId(request.id, sentMessage.message_id);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
    }
  }

  async sendRateToUser(userId: number, requestId: number, adminMessage: string, currency: string, amount: number): Promise<void> {
    this.logger.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –ø–æ –∑–∞—è–≤–∫–µ #${requestId}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    const rateMatch = adminMessage.match(/^(\d+(?:\.\d+)?)/);
    const rate = rateMatch ? parseFloat(rateMatch[1]) : 0;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
    const totalRub = rate * amount;
    
    const message = `üí± –û—Ç–≤–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ <b>#${requestId}</b>

üí∞ –ö—É—Ä—Å: <b>${formatCurrency(rate, '‚ÇΩ', 2)}</b> –∑–∞ 1 USDT
üíµ –°—É–º–º–∞: <b>${formatUSDT(amount)}</b>
üí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>${formatCurrency(totalRub, '‚ÇΩ', 2)}</b>

<b>‚ö†Ô∏è –ö—É—Ä—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ ${formatNumber(10)} –º–∏–Ω—É—Ç!</b>

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`;

    const inlineKeyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –ë—Ä–æ–Ω–∏—Ä—É—é',
            callback_data: `book_${requestId}`,
          },
        ],
        [
          {
            text: 'üí¨ –°–ø–∞—Å–∏–±–æ, —è –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω—è–ª',
            callback_data: `clarify_${requestId}`,
          },
        ],
        [
          {
            text: '‚è≥ –ñ–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
            callback_data: `wait_info_${requestId}`,
          },
        ],
      ],
    };

    try {
      const result = await sendMessageWithKeyboards(
        this.bot,
        userId,
        message,
        inlineKeyboard,
        { parse_mode: 'HTML' }
      );
      this.logger.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}, message_id: ${result.message_id}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
      throw error;
    }
  }

  async sendExpiredMessage(userId: number, requestId: number): Promise<void> {
    const message = `‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫—É—Ä—Å–∞ –ø–æ –∑–∞—è–≤–∫–µ #${requestId} –∏—Å—Ç–µ–∫–ª–æ.

–ö—É—Ä—Å –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üí∞ –ö—É–ø–∏—Ç—å USDT" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    await this.sendNoInputKeyboard(userId, message);
  }

  async updateAdminMessage(requestId: number, statusText: string): Promise<void> {
    const adminChatId = this.configService.get('ADMIN_CHAT_ID');
    
    if (!adminChatId) {
      return;
    }

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ requestId –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.telegram.sendMessage(
        adminChatId,
        `üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ <b>#${requestId}:</b> ${statusText}`,
        { parse_mode: 'HTML' }
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error);
    }
  }

  private formatCurrency(currency: string): string {
    const currencyMap = {
      'USD': 'üíµ USD',
      'EUR': 'üí∂ EUR',
      'RUB': '‚ÇΩ RUB',
      'USDT': '‚ÇÆ USDT',
    };
    return currencyMap[currency] || currency;
  }

  async sendUserActionToAdmin(
    requestId: number, 
    action: string, 
    userInfo: { username?: string; firstName?: string; telegramId: number }
  ): Promise<void> {
    const adminChatId = this.configService.get('ADMIN_CHAT_ID');
    
    if (!adminChatId) {
      this.logger.error('ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    const actionTexts = {
      'book': '‚úÖ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–õ –∑–∞—è–≤–∫—É',
      'clarify': 'üí¨ –ü—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω—è–ª –∫—É—Ä—Å',
      'wait_info': '‚è≥ –ñ–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
      'cancelled': '‚ùå –ó–∞—è–≤–∫–∞ –û–¢–ú–ï–ù–ï–ù–ê –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
      'completed': '‚úÖ –û–ë–ú–ï–ù –ó–ê–í–ï–†–®–ï–ù –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    };

    const actionText = actionTexts[action] || '–í—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ';
    const userDisplayName = userInfo.username ? `@${userInfo.username}` : userInfo.firstName;

    const message = `üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ <b>#${requestId}</b>

üë§ –ö–ª–∏–µ–Ω—Ç: <b>${userDisplayName}</b>
üìû Telegram ID: <b>${userInfo.telegramId}</b>
üéØ –î–µ–π—Å—Ç–≤–∏–µ: <b>${actionText}</b>

üìÖ <b>${new Date().toLocaleString('ru-RU')}</b>`;

    try {
      await this.bot.telegram.sendMessage(adminChatId, message, { parse_mode: 'HTML' });
      this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª: –∑–∞—è–≤–∫–∞ #${requestId}, –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  private async saveAdminMessageId(requestId: number, messageId: number): Promise<void> {
    // –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –¥–ª—è –∑–∞—è–≤–∫–∏ ${requestId}`);
  }
}
