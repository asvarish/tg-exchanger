import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { ExchangeRequest } from '../../../common/entities/exchange-request.entity';
import { User } from '../../../common/entities/user.entity';

@Injectable()
export class AdminNotificationService {
  constructor(
    @InjectBot() private bot: Telegraf,
    private configService: ConfigService,
  ) {}

  async sendRequestToAdmin(request: ExchangeRequest, user: User): Promise<void> {
    const adminChatId = this.configService.get('ADMIN_CHAT_ID');
    
    if (!adminChatId) {
      console.error('ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    const operationText = request.operationType === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
    const userInfo = user.username ? `@${user.username}` : `${user.firstName}`;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
    const botInfo = await this.bot.telegram.getMe();
    const botUsername = botInfo.username;

    const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${request.id}

üë§ –ö–ª–∏–µ–Ω—Ç: ${userInfo}
üìû Telegram ID: ${user.telegramId}
üí± –û–ø–µ—Ä–∞—Ü–∏—è: ${operationText}
üí∞ –í–∞–ª—é—Ç–∞: ${this.formatCurrency(request.currency)}
üíµ –°—É–º–º–∞: ${request.amount}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${request.city}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}

ü§ñ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –≤ –±–æ—Ç–µ`;

    try {
      const sentMessage = await this.bot.telegram.sendMessage(
        adminChatId,
        message,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'ü§ñ –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –±–æ—Ç–µ',
                  url: `https://t.me/${botUsername}?start=admin_panel`,
                },
              ],
            ],
          },
        }
      );

      // –°–æ—Ö—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.saveAdminMessageId(request.id, sentMessage.message_id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
    }
  }

  async sendRateToUser(userId: number, requestId: number, adminMessage: string, currency: string, amount: number, operationType: string): Promise<void> {
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –ø–æ –∑–∞—è–≤–∫–µ #${requestId}`);
    
    const operationText = operationType === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É';
    
    const message = `üí± –û—Ç–≤–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ #${requestId}

${adminMessage}

‚ö†Ô∏è –ö—É—Ä—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ 15 –º–∏–Ω—É—Ç!

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –ë—Ä–æ–Ω–∏—Ä—É—é',
            callback_data: `book_${requestId}`,
          },
        ],
        [
          {
            text: 'üí¨ –°–ø–∞—Å–∏–±–æ, —è –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω—è–ª',
            callback_data: `clarify_${requestId}`,
          },
        ],
        [
          {
            text: '‚è≥ –ñ–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
            callback_data: `wait_info_${requestId}`,
          },
        ],
      ],
    };

    try {
      const result = await this.bot.telegram.sendMessage(userId, message, {
        reply_markup: keyboard,
      });
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}, message_id: ${result.message_id}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
      throw error;
    }
  }

  async updateAdminMessage(requestId: number, statusText: string): Promise<void> {
    const adminChatId = this.configService.get('ADMIN_CHAT_ID');
    
    if (!adminChatId) {
      return;
    }

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ requestId –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.telegram.sendMessage(
        adminChatId,
        `üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${requestId}: ${statusText}`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error);
    }
  }

  private formatCurrency(currency: string): string {
    const currencyMap = {
      'USD': 'üíµ USD',
      'EUR': 'üí∂ EUR',
      'RUB': '‚ÇΩ RUB',
      'USDT': '‚ÇÆ USDT',
    };
    return currencyMap[currency] || currency;
  }

  async sendUserActionToAdmin(
    requestId: number, 
    action: string, 
    userInfo: { username?: string; firstName?: string; telegramId: number }
  ): Promise<void> {
    const adminChatId = this.configService.get('ADMIN_CHAT_ID');
    
    if (!adminChatId) {
      console.error('ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }

    const actionTexts = {
      'book': '‚úÖ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–õ –∑–∞—è–≤–∫—É',
      'clarify': 'üí¨ –ü—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω—è–ª –∫—É—Ä—Å',
      'wait_info': '‚è≥ –ñ–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
      'cancelled': '‚ùå –ó–∞—è–≤–∫–∞ –û–¢–ú–ï–ù–ï–ù–ê –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    };

    const actionText = actionTexts[action] || '–í—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ';
    const userDisplayName = userInfo.username ? `@${userInfo.username}` : userInfo.firstName;

    const message = `üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${requestId}

üë§ –ö–ª–∏–µ–Ω—Ç: ${userDisplayName}
üìû Telegram ID: ${userInfo.telegramId}
üéØ –î–µ–π—Å—Ç–≤–∏–µ: ${actionText}

üìÖ ${new Date().toLocaleString('ru-RU')}`;

    try {
      await this.bot.telegram.sendMessage(adminChatId, message);
      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª: –∑–∞—è–≤–∫–∞ #${requestId}, –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  private async saveAdminMessageId(requestId: number, messageId: number): Promise<void> {
    // –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –¥–ª—è –∑–∞—è–≤–∫–∏ ${requestId}`);
  }
}
